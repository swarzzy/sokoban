
vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (vec3(1.0f) - F0) * pow(1.0f - cosTheta, 5.0f);
}

float DistributionGGX(vec3 N, vec3 H, float a)
{
    float a4 = a * a * a * a;
    float NdotH = saturate(dot(N, H));
    float NdotHSq = NdotH * NdotH;

    float num = a4;
    float denom = (NdotHSq * (a4 - 1.0f) + 1.0f);
    denom = PI * denom * denom;

    return num / max(denom, 0.001f);
}

float GeometrySchlickGGX(float NdotV, float a)
{
    float k = ((a + 1.0f) * (a + 1.0f)) / 8.0f;

    float num = NdotV;
    float denom = NdotV * (1.0f - k) + k;

    return num / denom;
}

float GeometrySmith(float NdotV, float NdotL, float a)
{
    float ggx1 = GeometrySchlickGGX(NdotV, a);
    float ggx2 = GeometrySchlickGGX(NdotL, a);

    return ggx1 * ggx2;
}

vec3 Unreal4BRDF(vec3 L, vec3 V, vec3 N, vec3 albedo, float roughness, float metallic)
{
    vec3 H = normalize(V + L);

    // TODO: Adding this to avoid artifacts on edges
    // Why this value so big?
    float NdotV = saturate(dot(N, V)); // + 0.000001f; // NOTE: Adding this value (trick from epic games shaders) reduces artifacts on the edges in Intel gpu's but completely brokes everything on nvidia
    float NdotL = saturate(dot(N, L));

    // TODO: Specify F0 for dielectrics
    vec3 F0 = vec3(0.04f);
    F0 = mix(F0, albedo, metallic);

    // NOTE: Seems like it prodices visually incorrect result with H vector
    // and N gives more Fresnel-look-like result
    // but in papers people usually use H
    float HdotL = saturate(dot(H, L));
    vec3 F = FresnelSchlick(HdotL, F0);
    float D = DistributionGGX(N, H, roughness);
    float G = GeometrySmith(NdotV, NdotL, roughness);

    vec3 num = D * G * F;
    float denom = 4.0f * NdotV * NdotL;
    vec3 specular = num / max(denom, 0.001f);

    vec3 refracted = vec3(1.0f) - F;
    // TODO: Why it is here?
    refracted *= 1.0f - metallic;
    // NOTE: Lambertian diffuse brdf
    vec3 diffuse = refracted * albedo / PI;
    vec3 result = (specular + diffuse) * NdotL;
    return result;
}
